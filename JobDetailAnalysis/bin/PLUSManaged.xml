<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PLUSManaged</name>
    </assembly>
    <members>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAuthor">
            <summary>LicenseAuthor class -- Represents the SOLO Server Author who issued the license</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAuthor.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAuthor.#ctor(System.Xml.XmlNode)">
            <summary>Initialize License Author data with XML from the License File</summary>
            <param name="xml">XmlNode</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.AuthorID">
            <summary>License Author ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.CompanyName">
            <summary>License Author Company Name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.SupportEmail">
            <summary>Support Email Address</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.SupportSite">
            <summary>Support Web Site Address</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.SupportPhone">
            <summary>Support Phone Number</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.CustomData">
            <summary>Custom Data document</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseProduct">
            <summary>LicenseProduct class -- Represents the SOLO Server Product for which the License was issued.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProduct.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProduct.#ctor(System.Xml.XmlNode)">
            <summary>Initialize License Product data with XML from the License File</summary>
            <param name="xml">XmlNode</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProduct.ProductID">
            <summary>Product ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProduct.ProductName">
            <summary>Product Name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProduct.CustomData">
            <summary>Custom Data document</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseProductOption">
            <summary>LicenseProductOption class -- Represents the SOLO Server Product for which the License was issued.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.#ctor(System.Xml.XmlNode)">
            <summary>Initialize License Product data with XML from the License File</summary>
            <param name="xml">XmlNode</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.ProdOptionID">
            <summary>Product Option ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.OptionName">
            <summary>Product Option Name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.CustomData">
            <summary>Custom Data document</summary>
        </member>
        <member name="T:com.softwarekey.Client.Metering.MeteringLog">
            <summary>MeteringLog class</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.#ctor">
            <summary>Default MeteringLog Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.#ctor(System.String)">
            <summary>MeteringLog Constructor - Accepts a path to the log file</summary>
            <param name="logFilePath"></param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.Initialize">
            <summary>Initializes our log document object</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.GenerateUploadRequest(System.String)">
            <summary>Generate a CheckInstallationStatus request to upload the file</summary>
            <param name="installationId">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.AddEntry(com.softwarekey.Client.Metering.MeteringLogEntry)">
            <summary>Adds a new log entry to the XML log</summary>
            <param name="logEntry">MeteringLogEntry</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.Save">
            <summary>Saves the log to disk</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UpdateEntryTimestamp(System.String,com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent)">
            <summary>Updates a log entry's timestamp in the log file and saves changes to disk</summary>
            <param name="sessionId">string</param>
            <param name="logEvent">MeteringLogEntryEvent</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UpdateEntryTimestamp(System.String,System.String)">
            <summary>Updates a log entry's timestamp in the log file and saves changes to disk</summary>
            <param name="sessionId">string</param>
            <param name="logEvent">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.Delete">
            <summary>Clears out the log, and deletes the log file from disk</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.GetDefaultLogPath">
            <summary>Returns the default log path to use</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UploadLog(com.softwarekey.Client.Metering.MeteringLog,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String)">
            <summary>Uploads a log to SOLO Server</summary>
            <param name="log">MeteringLog</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
            <param name="installationId">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UploadLog(com.softwarekey.Client.Metering.MeteringLog,com.softwarekey.Client.Utils.AuthorEncryptionKey,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String)">
            <summary>Uploads a log to SOLO Server</summary>
            <param name="log">MeteringLog</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
            <param name="client">XmlActivationService</param>
            <param name="installationId">string</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLog.LogFilePath">
            <summary>The Log File's Path</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLog.LogDocument">
            <summary>The Log XmlDocument object</summary>
        </member>
        <member name="T:com.softwarekey.Client.Metering.MeteringLogEntry">
            <summary>MeteringLogEntry class</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent)">
            <summary>MeteringLogEntry Constructor that accepts a MeteringLogEntryEvent enumeration value</summary>
            <param name="e">MeteringLogEntryEvent</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent,System.String)">
            <summary>MeteringLogEntry Constructor that accepts a MeteringLogEntryEvent enumeration value and event data</summary>
            <param name="e">MeteringLogEntryEvent</param>
            <param name="eventData">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(System.String)">
            <summary>MeteringLogEntry Constructor that accepts a MeteringLogEntryEvent enumeration value and event data</summary>
            <param name="applicationName">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent,System.String,System.String)">
            <summary>MeteringLogEntry Constructor that accepts a MeteringLogEntryEvent enumeration value, event data, and an application name</summary>
            <param name="e">MeteringLogEntryEvent</param>
            <param name="eventData">string</param>
            <param name="applicationName">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(System.Xml.XmlNode)">
            <summary>Creation Constructor - Initializes properties from an XmlNode</summary>
            <param name="xml">XmlNode</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.ToXml">
            <summary>Returns an XmlDocument with this MeteringLogEntry object's data</summary>
            <returns>XmlDocument</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.Initialize(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent,System.String,System.String)">
            <summary>Internal initialization helper method -- called by constructors</summary>
            <param name="e">MeteringLogEntryEvent</param>
            <param name="eData">string</param>
            <param name="appName">string</param>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.EnteredDate">
            <summary>Entered Date</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.LogSessionID">
            <summary>Log Session ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.Event">
            <summary>The event being logged</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.EventString">
            <summary>The event being logged</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.EventData">
            <summary>Event Data</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.NetBIOSName">
            <summary>NetBIOS name of this computer</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.DNSName">
            <summary>DNS hostname of this computer</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.UserName">
            <summary>Current user's username</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.ApplicationName">
            <summary>Name of the application being metered</summary>
        </member>
        <member name="T:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent">
            <summary>Known metering log events events</summary>
        </member>
        <member name="F:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent.unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent.start">
            <summary>Application started</summary>
        </member>
        <member name="F:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent.end">
            <summary>Application terminated</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs">
            <summary>SearchProgressEventArgs</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs.#ctor(System.Int32)">
            <summary>Default SearchProgressEventArgs constructor</summary>
            <param name="progressPercentage">Int32 - the current search progress</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs.ProgressPercentage">
            <summary>Current Search Progress</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs">
            <summary>SearchCompleteEventArgs</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs.#ctor(System.Boolean)">
            <summary>Default SearchCompleteEventArgs constructor</summary>
            <param name="seatOpened">bool - whether or not the search was able to find an open network seat</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs.SeatOpened">
            <summary>Whether or not the search was able to find an open network seat</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore">
            <summary>NetworkSemaphore</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>Default NetworkSeamphore constructor</summary>
            <param name="semaphoreDirectory">string - the path to a network share where all workstations have read/write access</param>
            <param name="semaphorePrefix">string - the four letter file prefix. e.g. "sema"</param>
            <param name="seatsTotal">Int32 - the number of allowed concurrent users</param>
            <param name="runValidationThread">bool - whether or not to run the validation thread once a network session is established</param>
            <param name="validationThreadInterval">Int32 - how frequently, in seconds, the validation thread should check that the network session is still valid</param>
            <param name="runCleanupThread">bool - whether or not to run a semaphore cleanup thread once a network session is established</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Open">
            <summary>Attempts to open a network semaphore file</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Close">
            <summary>Closes an open network semaphore file</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Search">
            <summary>
            Performs an asynchronous search for an unused network semaphore file. Requires handling the SearchCompleted and optionally the SearchProgress events.
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.CancelSearch">
            <summary>
            Cancels the search in progress
            </summary>
        </member>
        <member name="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress">
            <summary>SearchProgress Event</summary>
        </member>
        <member name="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted">
            <summary>SearchComplete Event</summary>
        </member>
        <member name="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Invalid">
            <summary>Invalid Event - fires when the network session is no longer valid</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.CleanupThreadInterval">
            <summary>
            Gets or sets how frequently, in seconds, the cleanup thread tries to delete each semaphore file. The default is 10 seconds.
            </summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.ValidationThreadInterval">
            <summary>
            Gets or sets how frequently, in seconds, the validation thread checks that the network session is still valid.
            </summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SeatsTotal">
            <summary>
            Gets or sets the number of allowed concurrent users
            </summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SemaphorePath">
            <summary>
            Gets or sets the directory location used to create semaphore files.
            </summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SemaphorePrefix">
            <summary>
            Gets or sets the four letter prefix used when creating semaphore files.
            </summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.IsValid">
            <summary>Gets whether or not the network session is still valid</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.LastError">
            <summary>Gets the last error that occurred, if any</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SeatsActive">
            <summary>Gets the number of concurrent users</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SeatsAvailable">
            <summary>
            Gets the number of remaining seats available
            </summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SemaphoreName">
            <summary>
            Gets the name of the open semaphore file. Returns an empty string if no semaphore file is open.
            </summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgressEventHandler">
            <summary>SearchProgressEventHandler</summary>
            <param name="sender">object - the object that raised the event</param>
            <param name="e">SearchProgressEventArgs - the PercentProgress property indicates the current search progress</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompletedEventHandler">
            <summary>SearchCompleteEventHandler</summary>
            <param name="sender">object - the object that raised the event</param>
            <param name="e">SearchCompleteEventArgs - the SeatOpened property indicates whether the search was able to find an open network seat</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.InvalidEventHandler">
            <summary>InvalidEventHandler</summary>
            <param name="sender">object - the object that raised the event</param>
            <param name="e">EventArgs - none</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSession">
            <summary>NetworkSession</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm},System.String,System.Boolean)">
            <summary>Default NetworkSession constructor</summary>
            <param name="encryptionKeyId">string - the EncryptionKeyID from SOLO Server</param>
            <param name="clientKey">string - the Client Key data from SOLO Server</param>
            <param name="serverKey">string - the Server Key data from SOLO Server</param>
            <param name="useEncryption">bool - Whether or not to use encryption (set to true if unsure)</param>
            <param name="useSignatures">bool - Whether or not to use signatures (set to true if unsure)</param>
            <param name="identifierAlgorithms">Generic list of SystemIdentifierAlgorithms to use to bind the session to the current system.</param>
            <param name="certificatePath">string - the absolute path to the certificate file</param>
            <param name="loadCertificateFromFile">string - whether or not to initialize the session from a certificate file</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,System.Boolean,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm},System.String,System.Boolean)">
            <summary>Default NetworkSession constructor</summary>
            <param name="encryptionKey">AuthorEncryptionKey - the EncryptionKeyID and CSP Blob key data from SOLO Server</param>
            <param name="useEncryption">bool - Whether or not to use encryption (set to true if unsure)</param>
            <param name="useSignatures">bool - Whether or not to use signatures (set to true if unsure)</param>
            <param name="identifierAlgorithms">Generic list of SystemIdentifierAlgorithms to use to bind the session to the current system.</param>
            <param name="certificatePath">string - the absolute path to the certificate file</param>
            <param name="loadCertificateFromFile">string - whether or not to initialize the session from a certificate file</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument,System.Boolean,System.Boolean,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>NetworkSession constructor used to restore a NetworkSession to memory by loading a certicate from an XML file in memory</summary>
            <param name="encryptionKeyId">string - the EncryptionKeyID from SOLO Server</param>
            <param name="clientKey">string - the Client Key data from SOLO Server</param>
            <param name="serverKey">string - the Server Key data from SOLO Server</param>
            <param name="certificatePath">string - the absolute path to the certificate file</param>
            <param name="certificate">XmlDocument - the absolute path to the certificate file</param>
            <param name="useEncryption">bool - Whether or not to use encryption (set to true if unsure)</param>
            <param name="useSignatures">bool - Whether or not to use signatures (set to true if unsure)</param>
            <param name="identifierAlgorithms">Generic list of SystemIdentifierAlgorithms to use to bind the session to the current system.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GetOpenSessionRequest(System.Int32,System.String)">
            <summary>Gets an XML formatted web service request for opening a new Network Session</summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GetPollSessionRequest">
            <summary>Gets an XML formatted web service request for polling a Network Session</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GetCloseSessionRequest">
            <summary>Gets an XML formatted web service request for closing a Network Session</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GetCheckinSessionRequest">
            <summary>Gets an XML formatted web service request for checking-in a checked-out Network Session</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GetCheckoutSessionRequest(System.Decimal)">
            <summary>Gets an XML formatted web service request for checking-out a Network Session</summary>
            <param name="requestedCheckoutDuration">decimal - the time (in hours) requested to have the Network Session checked out</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessOpenSessionResponse(System.String)">
            <summary>Processes an Open Session response and returns true if successful</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessOpenSessionResponse(System.Xml.XmlDocument)">
            <summary>Processes an Open Session response and returns true if successful</summary>
            <param name="response">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessPollSessionResponse(System.String)">
            <summary>Processes a Poll Session response and returns true if successful</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessPollSessionResponse(System.Xml.XmlDocument)">
            <summary>Processes a Poll Session response and returns true if successful</summary>
            <param name="response">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessCloseSessionResponse(System.String)">
            <summary>Processes a Close Session response and returns true if successful</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessCloseSessionResponse(System.Xml.XmlDocument)">
            <summary>Processes a Close Session response and returns true if successful</summary>
            <param name="response">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessCheckoutSessionResponse(System.String)">
            <summary>Processes a Check-out Session response and returns true if successful</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessCheckoutSessionResponse(System.Xml.XmlDocument)">
            <summary>Processes a Check-out Session response and returns true if successful</summary>
            <param name="response">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessCheckinSessionResponse(System.String)">
            <summary>Processes a Check-in Session response and returns true if successful</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessCheckinSessionResponse(System.Xml.XmlDocument)">
            <summary>Processes a Check-in Session response and returns true if successful</summary>
            <param name="response">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.InitializeCurrentIdentifiers">
            <summary>Initializes the CurrentIdentifiers property with data using the algorithms specified in the IdentifierAlgorithms property.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessNetworkSessionWebServiceResponse(System.String)">
            <summary>Processes a web service response string and returns true if successful</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ProcessNetworkSessionWebServiceResponse(System.Xml.XmlDocument)">
            <summary>Processes a web service response XmlDocument and returns true if successful</summary>
            <param name="response">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GetActivationData">
            <summary>Returns an XML document to include in ActivationData</summary>
            <returns>XmlDocument</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GenerateSessionRequest(System.Int32,System.String)">
            <summary>Private method for generating Open session requests</summary>
            <param name="licenseId">int</param>
            <param name="password">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GenerateSessionRequest(com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType)">
            <summary>Private method for generating poll, close, or check-in session requests</summary>
            <param name="requestType">NetworkSessionRequestType - the type of request we are generating</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GenerateSessionRequest(System.Decimal)">
            <summary>Private method overload for generating checkout session requests</summary>
            <param name="requestedCheckoutDuration">int</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.GenerateSessionRequest(com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType,System.Int32,System.String,System.Decimal)">
            <summary>Generic private method for generating encrypted and signed network session requests</summary>
            <param name="requestType">NetworkSessionRequestType - the type of request we are generating</param>
            <param name="licenseId">int</param>
            <param name="password">string</param>
            <param name="requestedCheckoutDuration">int</param>
            <returns>string</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.Certificate">
            <summary>The Network Session Certificate</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CertificatePath">
            <summary>The path to the Network Session Certificate file used when restoring a checked-out session.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError">
            <summary>The last error that occurred, if any</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.IdentifierAlgorithms">
            <summary>System Identifier Algorithms to use to identifier the system the Network Session certificate is issued to.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CurrentIdentifiers">
            <summary>Current System Identifiers</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType">
            <summary>Enumeration for passing along the type of request we're working with internally</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Open">
            <summary>Open session request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Poll">
            <summary>Poll session request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Close">
            <summary>Close session request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Checkout">
            <summary>Checkout request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Checkin">
            <summary>Checkin request</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate">
            <summary>NetworkSessionCertificate - Represents a certificate issued by SOLO Server for an authorized network session</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>Initializes the NetworkSessionCertificate from an XML document</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
            <param name="certificate">XmlDocument</param>
            <param name="useEncryption">bool - Whether or not to use encryption (set to true if unsure)</param>
            <param name="useSignatures">bool - Whether or not to use signatures (set to true if unsure)</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String,System.Boolean,System.Boolean)">
            <summary>Initializes the NetworkSessionCertificate from an XML document on the file system</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
            <param name="certificatePath">string - The absolute path to the certificate XML file</param>
            <param name="useEncryption">bool - Whether or not to use encryption (set to true if unsure)</param>
            <param name="useSignatures">bool - Whether or not to use signatures (set to true if unsure)</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.Initialize(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>Initializes the Network Session Certificate from an XmlDocument</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
            <param name="certificate">XmlDocument</param>
            <param name="useEncryption">bool</param>
            <param name="useSignatures">bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.Save(System.String)">
            <summary>Saves the NetworkSessionCertificate to a file and returns true if successful</summary>
            <param name="certificatePath">string - the absolute path to the certificate file</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.SessionID">
            <summary>Network Session ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.ComputerName">
            <summary>The name of the computer authorized for the Network Session</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LastPollDate">
            <summary>The last time this machine phoned home/polled against SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.AllocatedDate">
            <summary>The date and time in which the Network Session was allocated/authorized</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.AllocatedUntilDate">
            <summary>The date and time in which the Network Session is no longer authorized - this is typically extended with Poll request or a Checkout request</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.TotalSeats">
            <summary>The total number of Network Sessions allowed</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.SeatsAvailable">
            <summary>The number of allowed Network Sessions not yet allocated</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckedOut">
            <summary>Whether or not this Network Session has been checked out</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.PollFrequency">
            <summary>The amount of time (in seconds) that should pass before the application attempts to poll against SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.PollRetryCount">
            <summary>The number of times to retry polling against SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.PollRetryFrequency">
            <summary>The amount of time (in seconds) to wait between each retry for polling against SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CustomerID">
            <summary>The Customer ID in SOLO Server to which the License ID belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LicenseID">
            <summary>The SOLO Server License ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.ProductID">
            <summary>The Product ID in SOLO Server to which the Product Option ID belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.ProductOptionID">
            <summary>The Product Option ID in SOLO Server to which the License ID is attached</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckoutDurationMinimum">
            <summary>The minimum amount of time (in hours) a checkout request allows.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckoutDurationMaximum">
            <summary>The maximum amount of time (in hours) a checkout request allows.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LastError">
            <summary>The last error that occurred while trying to initialize the certificate</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CertificatePath">
            <summary>If CheckedOut is true, this contains the path to the certificate file</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CertificateXml">
            <summary>The Certificate XML document -- If encryption is being used, this document is encrypted</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.AuthorizedIdentifiers">
            <summary>Authorized System Identifiers</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation">
            <summary>NetworkSession Validation</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemValidation">
            <summary>Abstract SystemValidation class, used as a base class for all system validations which may be implemented</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemValidation.m_LastError">
            <summary>The last error that occurred within this SystemValidation object</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemValidation.Validate">
            <summary>Performs the relevant system validation, and returns true if valid.  If false is returned, check the LastError property for details.</summary>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemValidation.LastError">
            <summary>The last error encountered in this object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.#ctor(com.softwarekey.Client.Licensing.Network.NetworkSession)">
            <summary>NetworkSessionValidation constructor for validating a given network sesssion's data, including time checks when possible, and requiring an exact match of System Identifier information.</summary>
            <param name="session">NetworkSession</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.#ctor(com.softwarekey.Client.Licensing.Network.NetworkSession,com.softwarekey.Client.Licensing.SystemIdentifierValidation,com.softwarekey.Client.Licensing.SystemDateTimeValidation)">
            <summary>NetworkSessionValidation constructor for validating a given network sesssion's data, with specified validator objects</summary>
            <param name="session">NetworkSession</param>
            <param name="identifierValidator">SystemIdentifierValidation</param>
            <param name="dateTimeValidator">SystemDateTimeValidation</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.#ctor(com.softwarekey.Client.Licensing.Network.NetworkSession,System.Boolean,System.Int32,System.Boolean,com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType)">
            <summary>NetworkSessionValidation constructor for validating a given network sesssion's data</summary>
            <param name="session">NetworkSession</param>
            <param name="useSystemIdentifierValidation">bool</param>
            <param name="matchingIdentifiersRequired">int</param>
            <param name="useCertificatePathValidation">bool</param>
            <param name="ntpValidationType">NetworkSessionTimeValidationType</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.InitializeDefaultDateTimeValidator(System.Boolean)">
            <summary>Initializes the default SystemDateTimeValidation object</summary>
            <param name="validationRequired">bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.Validate">
            <summary>Validates the NetworkSession, and returns true if valid.  If false is returned, check the LastError property for details.</summary>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.UseCertificatePathValidation">
            <summary>Whether or not to validate the certificate file path when the session is checked out</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.Session">
            <summary>The NetworkSession object which is to be validated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.SystemIdentifierValidator">
            <summary>The SystemIdentifierValidator object which is to perform the validation of SystemIdentifier objects (null if no SystemIdentifier validation is to be done)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.SystemDateTimeValidator">
            <summary>The SystemDateTimeValidation object which is to perform the validation of system's date and time (null if no date and time validation is to be done)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType">
            <summary>The requirement type for system date/time validation.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType.None">
            <summary>No date/time validation is done</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType.WhenAvailable">
            <summary>Validation is only done when servers can be reached</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType.AlwaysRequired">
            <summary>Validation is always required -- validation will fail if servers are not reached</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NetworkNameIdentifier">
            <summary>Network Name Identifier</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemIdentifier">
            <summary>System Identifier</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_defaultIdNumber">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_name">
            <summary>The unique identifier name</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_value">
            <summary>The identifier value</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_type">
            <summary>The type of identifer</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_valueHash">
            <summary>The hash of the identifier value</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor">
            <summary>Default SystemIndentifier constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor(System.String)">
            <summary>
            SystemIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor(System.String,System.String)">
            <summary>
            SystemIdentifier constructor allowing for initialization with the name and value
            </summary>
            <param name="name">string</param>
            <param name="value">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            SystemIdentifier constructor allowing for initialization with the name, value, and hash
            </summary>
            <param name="name">string</param>
            <param name="value">string</param>
            <param name="hash">string</param>
            <param name="type">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.ToString">
            <summary>
            Returns an XML formatted string of this system identifier
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.ToActivationDataString">
            <summary>
            Returns an XML formatted string of this system identifier, formatted for SOLO Server's XmlActivationService web service
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.ToXml">
            <summary>Returns an XML-formatted document</summary>
            <returns>XmlDocument</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.Equals(System.Object)">
            <summary>object.Equals override</summary>
            <param name="obj">object</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.GetHashCode">
            <summary>object.GetHashCode override</summary>
            <returns>int</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.op_Equality(com.softwarekey.Client.Licensing.SystemIdentifier,com.softwarekey.Client.Licensing.SystemIdentifier)">
            <summary>Returns true if two system identifiers are equal</summary>
            <param name="a">SystemIdentifier</param>
            <param name="b">SystemIdentifier</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.op_Inequality(com.softwarekey.Client.Licensing.SystemIdentifier,com.softwarekey.Client.Licensing.SystemIdentifier)">
            <summary>Returns true if two system identifiers are not equal</summary>
            <param name="a">SystemIdentifier</param>
            <param name="b">SystemIdentifier</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.TryParse(System.String,com.softwarekey.Client.Licensing.SystemIdentifier@)">
            <summary>Parses an XML string representation of a System Identifier</summary>
            <param name="value">string</param>
            <param name="identifier">SystemIdentifier</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">
            <summary>Generates an Activation Data XML document from a list of SystemIdentifier objects passed in</summary>
            <param name="identifiers">List of SystemIdentifier objects</param>
            <returns>XmlDocument</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.Name">
            <summary>The name of the system identifier</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type">
            <summary>Returns the type of system identifier this is</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.Value">
            <summary>The plain-text value of the system identifier</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.ValueHash">
            <summary>SHA-512 hash generated from the Value</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NetworkNameIdentifier.m_netNameIdentifierId">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor">
            <summary>Default NetworkNameIdentifier Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor(System.String)">
            <summary>
            NetworkNameIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor(System.String,System.String)">
            <summary>NetworkNameIdentifier constructor allowing for initialization with the name and value</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>NetworkNameIdentifier constructor allowing for initialization with the name, value, and hash</summary>
            <param name="name">string</param>
            <param name="value">string</param>
            <param name="hash">string</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.NetworkNameIdentifier.Type">
            <summary>Returns the type of system identifier this is</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier">
            <summary>Computer Name Identifier</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ComputerNameIdentifier.m_computerNameIdentifierId">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor">
            <summary>Default ComputerNameIdentifier Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor(System.String)">
            <summary>
            ComputerNameIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor(System.String,System.String)">
            <summary>ComputerNameIdentifier constructor allowing for initialization with the name and value</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>ComputerNameIdentifier constructor allowing for initialization with the name, value, and hash</summary>
            <param name="name">string</param>
            <param name="value">string</param>
            <param name="hash">string</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ComputerNameIdentifier.Type">
            <summary>Returns the type of system identifier this is</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm">
            <summary>Computer Name System Identifier Algorithm</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm">
            <summary>System Identifier class</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.m_algorithmId">
            <summary>Static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.#ctor">
            <summary>Default SystemIdentifierAlgorithm constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.#ctor(System.String)">
            <summary>SystemIdentifierAlgorithm constructor allowing a custom algorithm name to be used</summary>
            <param name="algorithmId"></param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.GetIdentifiers">
            <summary>Returns the list of SystemIdentifier objects for this SystemIdentifierAlgorithm</summary>
            <returns>List</returns>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm.#ctor">
            <summary>Default ComputerNameIdentifierAlgorithm constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm.GetIdentifiers">
            <summary>
            Returns a generic list of Computer Name system identifers
            </summary>
            <returns>List</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAlias">
            <summary>
            Base, abstract LicenseAlias class -- Individual Alias types must be inherited
            in separate classes and class files.
            </summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.m_lastError">
            <summary>The last error that occurred</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.#ctor(System.String,com.softwarekey.Client.Licensing.LicenseAlias.LocationType,System.String,System.Boolean)">
            <summary>The default LicenseAlias constructor</summary>
            <param name="location">string</param>
            <param name="type">LocationType</param>
            <param name="clientKey">string - the client encryption key</param>
            <param name="useEncryption">bool - whether or not to use encryption</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.CheckAlias">
            <summary>Compares the current license to the alias and returns true if everything checks out OK</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.DeleteAlias">
            <summary>Deletes the current alias, and returns true if successful</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the latest and greatest license data, returns true if successful</summary>
            <param name="license">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.CheckAlias(System.String)">
            <summary>
            The base CheckAlias method -- decrypts and verifies the alias document, and checks its last updated date.  Returns true if all checks out OK.
            </summary>
            <param name="alias">alias</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.GetMostCurrentAlias(System.Collections.Generic.List{com.softwarekey.Client.Licensing.LicenseAlias})">
            <summary>
            Gets the most current alias from a list
            </summary>
            <param name="aliases">Generic list of LicenseAlias objects</param>
            <returns>LicenseAlias</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.Location">
            <summary>The location of the alias</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.Type">
            <summary>The type location in which the alias is stored</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError">
            <summary>The last error that occurred</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.LastUpdated">
            <summary>The date the alias was last updated</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.Contents">
            <summary>The contents of the alias file</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAlias.LocationType">
            <summary>The type of location in which the alias is to be stored</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.LocationType.Unknown">
            <summary>Unknown type of alias location</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.LocationType.FileSystem">
            <summary>The alias is located on a file system accessbile by the computer</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.LocationType.WindowsRegistry">
            <summary>The alias is located in the Windows registry on the current computer</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseFileSystemAlias">
            <summary>
            File-System License File Alias
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            LicenseFileSystemAlias constructor
            </summary>
            <param name="location">string</param>
            <param name="clientKey">string - the client encryption key</param>
            <param name="useEncryption">bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.CheckAlias">
            <summary>Compares the current license to the alias and returns true if everything checks out OK</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.DeleteAlias">
            <summary>Deletes a License File alias from the system, and returns true if successful</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the latest and greatest license data, returns true if successful</summary>
            <param name="license">string</param>
            <returns>bool</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias">
            <summary>
            Windows Registry License File Alias
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            LicenseWindowsRegistryAlias constructor -- Assumes HKEY_LOCAL_MACHINE is the root/hive to which the path is relative
            </summary>
            <param name="location">string - The registry key path</param>
            <param name="clientKey">string - the client encryption key</param>
            <param name="useEncryption">bool - whether or not to use encryption</param>
            <param name="value">string - The name of the registry value (e.g. "Version")</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.#ctor(System.String,System.String,System.Boolean,Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            LicenseWindowsRegistryAlias constructor which allows you to specify an alternative root/hive
            </summary>
            <param name="location">string - The registry key path</param>
            <param name="root">RegistryHive - The root registry hive to which the location specified is relative</param>
            <param name="clientKey">string - the client encryption key</param>
            <param name="useEncryption">bool - whether or not to use encryption</param>
            <param name="value">string - The name of the registry value (e.g. "Version")</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.CheckAlias">
            <summary>Compares the current license to the alias and returns true if everything checks out OK</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.DeleteAlias">
            <summary>Deletes a license file registry alias, and returns true if successful</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the latest and greatest license data, returns true if successful</summary>
            <param name="license">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.WriteKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Attempts to write the registry key (and create it if missing)
            </summary>
            <param name="root">RegistryKey</param>
            <param name="license">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.ReadKey(Microsoft.Win32.RegistryKey)">
            <summary>Reads a registry key string value</summary>
            <param name="root">RegistryKey</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.DeleteKey(Microsoft.Win32.RegistryKey)">
            <summary>Deletes a registry key</summary>
            <param name="root">RegistryKey</param>
            <returns>bool</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.License">
            <summary>License class</summary>
            <summary>License class</summary>
            <summary>License class</summary>
            <summary>License class</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_serverKey">
            <summary>Server Key</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_clientKey">
            <summary>Client Key</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_isLicenseDecrypted">
            <summary>True if license file has been decrypted</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_isLicenseVerified">
            <summary>True if the license file has been verified</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_useEncryptedFile">
            <summary>True if license file encrryption is being used</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_useWebServiceEncryption">
            <summary>True if web service encryption is being used</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_licenseFile">
            <summary>The license file XML document</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_currentSessionCode">
            <summary>The session code used to prevent a manual activation from being replayed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_sntpRequests">
            <summary>List of SNTP requests to make to try and verify the network time against multiple servers</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_identifierAlgorithms">
            <summary>The algorithms used for identifying the system</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_thisProductId">
            <summary>The SOLO Server Product ID for this product</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_encryptionKeyId">
            <summary>The SOLO Server Encryption Key ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_productVersion">
            <summary>The version of this product</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_authorizedIdentifiers">
            <summary>The System Identifiers authorized per the license file</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_currentIdentifiers">
            <summary>The current system's identifiers</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_lastError">
            <summary>The last error</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_formatVersion">
            <summary>The format version of the license file</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_licenseId">
            <summary>The SOLO Server License ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_quantityOrdered">
            <summary>The quantity of licenses ordered</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_productId">
            <summary>The SOLO Server Product ID for the License ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_prodOptionId">
            <summary>The SOLO Server Product Option ID for the License ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_installationId">
            <summary>The SOLO Server Installation ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_installationName">
            <summary>The name of the installation</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_signatureDate">
            <summary>The date in which the license file itself was created and signed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_effectiveStartDate">
            <summary>The date in which this license becomes effective</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_effectiveEndDate">
            <summary>The date in which this license expires</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString1">
            <summary>User defined string data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString2">
            <summary>User defined string data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString3">
            <summary>User defined string data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString4">
            <summary>User defined string data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString5">
            <summary>User defined string data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString6">
            <summary>User defined string data field 6</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString7">
            <summary>User defined string data field 7</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString8">
            <summary>User defined string data field 8</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString9">
            <summary>User defined string data field 9</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString10">
            <summary>User defined string data field 10</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber1">
            <summary>User defined numeric data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber2">
            <summary>User defined numeric data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber3">
            <summary>User defined numeric data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber4">
            <summary>User defined numeric data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber5">
            <summary>User defined numeric data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate1">
            <summary>User defined date/time data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate2">
            <summary>User defined date/time data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate3">
            <summary>User defined date/time data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate4">
            <summary>User defined date/time data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate5">
            <summary>User defined date/time data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat1">
            <summary>User defined float data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat2">
            <summary>User defined float data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat3">
            <summary>User defined float data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat4">
            <summary>User defined float data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat5">
            <summary>User defined float data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_latestVersion">
            <summary>The latest version of the product available</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_triggerCode">
            <summary>The trigger code number issued by SOLO Server</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_triggerCodeFixedValue">
            <summary>The value of TCFixedValue from SOLO Server's product option settings</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_customerId">
            <summary>The SOLO Server Customer ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_firstName">
            <summary>The Customer's first name</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_lastName">
            <summary>The Customer's last name</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_companyName">
            <summary>The Customer's company name</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_email">
            <summary>The Customer's email address</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.#ctor(System.String,System.String)">
            <summary>
            Initializes a License Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a License Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Initializes a License Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
            <param name="productId">Int32</param>
            <param name="encryptionKey">string</param>
            <param name="productVersion">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>
            Initializes a License Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
            <param name="productId">Int32</param>
            <param name="encryptionKey">string</param>
            <param name="productVersion">string</param>
            <param name="identifierAlgorithms">List</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.initialize(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>
            Helper method called by constructors for initialization
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
            <param name="productId">Int32</param>
            <param name="encryptionKey">sting</param>
            <param name="productVersion">string</param>
            <param name="identifierAlgorithms">List</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.initializeFromXml(System.Xml.XmlDocument)">
            <summary>
            Initializes properties from a plain-text XML license document.
            </summary>
            <param name="xml">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.LoadFile(System.String)">
            <summary>Tries to load a license file from the file system and returns true if successful</summary>
            <param name="path">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.Load(System.String)">
            <summary>Loads a license file from a given location.  The contents provided in the data argument varies on the value of the locationType argument.</summary>
            <param name="data">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ResetSessionCode">
            <summary>Creates a new session code in the CurrentSessionCode property</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ValidateSessionCode(System.String,System.Boolean)">
            <summary>Validates a session code from an XML response (typically used for manually processed actions), and only returns true if validation passes.  Check the value of LastError if validation fails</summary>
            <param name="responseDocument">string</param>
            <param name="validationRequired">bool</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ValidateSessionCode(System.Xml.XmlDocument,System.Boolean)">
            <summary>Validates a session code from an XML response (typically used for manually processed actions), and only returns true if validation passes.  Check the value of LastError if validation fails</summary>
            <param name="responseDocument">XmlDocument</param>
            <param name="validationRequired">bool</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetActivationRequest(System.Int32,System.String)">
            <summary>
            Gets an XML request for activation
            </summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.String,System.String)">
            <summary>
            Activates online using the previous License ID used and the given password and endpoint configuration name
            </summary>
            <param name="password">string</param>
            <param name="endpoint">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>
            Activates online using the previous License ID used and the given password and given initialized soap client
            </summary>
            <param name="password">string</param>
            <param name="client">XmlActivationServiceSoapClient</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">
            <summary>
            Activates online a given License ID, password, and endpoint configuration name
            </summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <param name="endpoint">string</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>
            Activates online a given License ID, password, and an initialized web service client object
            </summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <param name="client">XmlActivationServiceSoapClient</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivationResponse(System.String)">
            <summary>Processes an activation XML response</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivationResponse(System.Xml.XmlNode)">
            <summary>Processes an activation XML response</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetLicenseRefreshRequest">
            <summary>Gets an XML request for refreshing the license</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">
            <summary>Returns the current license file contents from SOLO Server for the Installation ID the current license is using.</summary>
            <param name="licenseContent">string - The contents of the License File</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String,System.String@)">
            <summary>Returns the current license file contents from SOLO Server for the Installation ID the current license is using.</summary>
            <param name="endpoint">string - The URL to use to call the web service</param>
            <param name="licenseContent">string - The contents of the License File</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.RefreshLicense(com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService,System.String@)">
            <summary>Returns the current license file contents from SOLO Server for the Installation ID the current license is using.</summary>
            <param name="client">XmlLicenseFileService - The client object used to call the web service</param>
            <param name="licenseContent">string - The contents of the License File</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessLicenseRefreshResponse(System.String,System.String@)">
            <summary>Processes a License Refresh response</summary>
            <param name="response">string</param>
            <param name="licenseContent">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessLicenseRefreshResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes a License Refresh response</summary>
            <param name="response">XmlNode</param>
            <param name="licenseContent">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetActivationInstallationLicenseFileRequest(System.Int32,System.String)">
            <summary>
            Gets an XML request for activation and receiving a license file in a single call
            </summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.String,System.String,System.String@)">
            <summary>
            Activates online using the previous License ID used and the given password and endpoint configuration name
            </summary>
            <param name="password">string</param>
            <param name="endpoint">string</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String@)">
            <summary>
            Activates online using the previous License ID used and the given password and given initialized soap client
            </summary>
            <param name="password">string</param>
            <param name="client">XmlActivationServiceSoapClient</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">
            <summary>
            Activates online a given License ID, password, and endpoint configuration name
            </summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <param name="endpoint">string</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String@)">
            <summary>
            Activates online a given License ID, password, and an initialized web service client object
            </summary>
            <param name="licenseId">Int32</param>
            <param name="password">string</param>
            <param name="client">XmlActivationServiceSoapClient</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivateInstallationLicenseFileResponse(System.String,System.String@)">
            <summary>Processes an activation XML response</summary>
            <param name="response">string</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivateInstallationLicenseFileResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes an activation XML response</summary>
            <param name="response">XmlNode</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetCheckInstallationStatusRequest">
            <summary>Returns the request string to check the installation status for given Encryption Key ID and Installatain ID</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus">
            <summary>Check the installation status for the given Installation ID. Returns true when installation is valid; otherwise, returns false</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus(System.String)">
            <summary>Check the installation status for the given Installation ID. Returns true when installation is valid; otherwise, returns false</summary>
            <param name="endpoint">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>Check the installation status for the given Installation ID. Returns true when installation is valid; otherwise, returns false</summary>
            <param name="client">XmlActivationService</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessCheckInstallationStatusResponse(System.Xml.XmlNode)">
            <summary>Processes the installation status response.  Returns true if the Installation check was successful and the Installation is found to be valid; otherwise, returns false.</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetDeactivateInstallationRequest">
            <summary>Returns the request string for deactivation request for given Encryption Key ID and Installation ID</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation">
            <summary>Deactivate the given Installation ID. Returns true when installation is deactivated; otherwise, returns false.</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation(System.String)">
            <summary>Deactivate the given Installation ID. Returns true when installation is deactivated; otherwise, returns false.</summary>
            <param name="endpoint">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>Deactivate the given Installation ID. Returns true when installation is deactivated; otherwise, returns false.</summary>
            <param name="client">XmlActivationService</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessDeactivateInstallationResponse(System.Xml.XmlNode)">
            <summary>Processes the installation deactivation response.  Returns true if the deactivation was successful; otherwise, returns false.</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddIdentifierAlgorithm(com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm)">
            <summary>
            Adds a system identifier algorithm to use for system identification verification
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.InitializeCurrentIdentifiers">
            <summary>Initializes the set of current system identifiers</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddTimeServerCheck(System.String)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <param name="host">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddTimeServerCheck(System.String,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <param name="host">string</param>
            <param name="port">int</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddTimeServerCheck(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <param name="host">string</param>
            <param name="port">int</param>
            <param name="sendTimeout">int</param>
            <param name="receiveTimeout">int</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckTimeAgainstServers">
            <summary>Checks the system time against multiple time servers/sntp requests, allowing up to a 5 minute difference</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckTimeAgainstServers(System.Double)">
            <summary>Checks the system time against multiple time servers/sntp requests</summary>
            <param name="minuteThreshold">double</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckTimeAgainstServers(System.Collections.Generic.List{com.softwarekey.Client.Utils.SimpleNetworkTime},System.Double)">
            <summary>Checks the system time against multiple time servers/sntp requests</summary>
            <param name="requests">Generic list of SimpleNetworkTime objects</param>
            <param name="minuteThreshold">double</param>
            <returns>LicenseError</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.VerifySystemDateTime">
            <summary>Verifies that the system date time is within 5 minutes of network time</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.VerifySystemDateTime(System.Double)">
            <summary>Verifies the system time is within a given number of minutes of network time</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.VerifySystemDateTime(System.Double,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>Verifies the system time is within a given number of minutes of network time, with specified timeouts (in milliseconds)</summary>
            <param name="minuteThreshold">double</param>
            <param name="sendTimeout">int</param>
            <param name="receiveTimeout">int</param>
            <param name="host">string</param>
            <param name="port">int</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ThisProductID">
            <summary>The Product ID of this product.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.EncryptionKeyID">
            <summary>The Encryption Key Identifier</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ProductVersion">
            <summary>The version of this product</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.InstallationName">
            <summary>The name of the installation</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LastError">
            <summary>The last error encountered</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.FormatVersion">
            <summary>The format version of the license</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseID">
            <summary>The License ID of the license purchased and activated</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.QuantityOrdered">
            <summary>The quantity of licenses ordered</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ProductID">
            <summary>The Product ID to which this license belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ProdOptionID">
            <summary>The Product Option ID to which this license belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.InstallationID">
            <summary>The Installation ID for the activation on this computer</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.SignatureDate">
            <summary>The date in which the license file itself was created and signed</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.EffectiveStartDate">
            <summary>The date in which the license is effective</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.EffectiveEndDate">
            <summary>The date in which the license expires.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString1">
            <summary>User Defined String Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString2">
            <summary>User Defined String Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString3">
            <summary>User Defined String Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString4">
            <summary>User Defined String Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString5">
            <summary>User Defined String Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString6">
            <summary>User Defined String Field 6</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString7">
            <summary>User Defined String Field 7</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString8">
            <summary>User Defined String Field 8</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString9">
            <summary>User Defined String Field 9</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString10">
            <summary>User Defined String Field 10</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate1">
            <summary>User Defined Date-Time Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate2">
            <summary>User Defined Date-Time Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate3">
            <summary>User Defined Date-Time Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate4">
            <summary>User Defined Date-Time Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate5">
            <summary>User Defined Date-Time Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber1">
            <summary>User Defined Number Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber2">
            <summary>User Defined Number Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber3">
            <summary>User Defined Number Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber4">
            <summary>User Defined Number Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber5">
            <summary>User Defined Number Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat1">
            <summary>User Defined Float Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat2">
            <summary>User Defined Float Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat3">
            <summary>User Defined Float Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat4">
            <summary>User Defined Float Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat5">
            <summary>User Defined Float Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LatestVersion">
            <summary>The latest version of the product available</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.TriggerCode">
            <summary>The Trigger Code number issued by SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.TriggerCodeFixedValue">
            <summary>The Trigger Code Fixed Value issued by SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.CustomerID">
            <summary>The Customer ID to which this license belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.FirstName">
            <summary>The customer's first name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LastName">
            <summary>The customer's last name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.CompanyName">
            <summary>The customer's company name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Email">
            <summary>The customer's email address</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Author">
            <summary>The Author that issued this License</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Product">
            <summary>The Product for which the license was issued</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ProductOption">
            <summary>The Product Option for which the license was issued</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode">
            <summary>The current session code being used to prevent replay attacks in manual activation</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.AuthorizedIdentifiers">
            <summary>Generic list of authorized/activated system identifiers</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.CurrentIdentifiers">
            <summary>Generic list of current system identifiers</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.NumberOfMatchingIdentifiers">
            <summary>Determines the number of authorized system identifiers with matching current system identifiers</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.License.LicenseLocationType">
            <summary>License file location types</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.LicenseLocationType.Memory">
            <summary>From a string in memory</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.LicenseLocationType.File">
            <summary>From a file on the file system</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseError">
            <summary>Class for licensing errors</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NONE">
            <summary>Error number for when there is no error</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_DATA">
            <summary>Error number for when invalid data is provided</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_SERVER_KEY">
            <summary>Error number for when an invalid server key is provided</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_CLIENT_KEY">
            <summary>Error number for when an invalid client key is provided</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_DECRYPTION_FAILED">
            <summary>Error number for when decrypting a document fails</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_VERIFICATION_FAILED">
            <summary>Error number for when verifying the signature of a document fails</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_ENCRYPTION_FAILED">
            <summary>Error number for when encrypting a document fails</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SIGNING_FAILED">
            <summary>Error number for when signing a document fails</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SESSION_VERIFICATION_FAILED">
            <summary>Error number for when session code verification fails</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INSTALLATIONID_REQUIRED">
            <summary>An Installation ID is required, but not present.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_WEBSERVICE_INVALID_CONFIGURATION">
            <summary>Error number for when an invalid web service configuration is provided</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_WEBSERVICE_CALL_FAILED">
            <summary>Error number for when a web service call failed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_WEBSERVICE_RETURNED_FAILURE">
            <summary>Error number for when a web service call returned an error</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_REQUIRED_SERVER_VALIDATION_FAILED">
            <summary>Error number for when a any kind of validation against SOLO Server is required, but could not be completed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_LOAD_LICENSE">
            <summary>Error number for when an attempt to load a license file failed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_SAVE_LICENSE">
            <summary>Error number for when an attempt to save a new license file failed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_NOT_EFFECTIVE_YET">
            <summary>Error number for when the license is not effective yet</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_EXPIRED">
            <summary>Error number for when the license is expired</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_ALIAS_VALIDATION_FAILED">
            <summary>Error number for when an alias's LastUpdated date could not be validated</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_ALIAS_VALIDATION_TIME_MISMATCH">
            <summary>Error number for when an alias has a LastUpdated date in the future</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_SAVE_NETWORK_CERTIFICATE">
            <summary>Error number for when an attempt to save a NetworkSessionCertificate file failed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_CERTIFICATE_INVALID_PATH">
            <summary>Error number for when a NetworkSessionCertificate file's path is invalid</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_CERTIFICATE_REQUIRED">
            <summary>Error number for when a NetworkSessionCertificate is not present, but is required</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_DELETE_FILE">
            <summary>Error number for when an attempt to delete a license file failed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_SEMAPHORE_INVALID_PATH">
            <summary>Error number for when a NetworkSemaphore file's path is invalid</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_LICENSE_FULL">
            <summary>Error number for when the number of allowed concurrent users has been reached</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_SEMAPHORE_LOCK_FAILED">
            <summary>Error number for when netowrk semaphore file creation fails</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SYSTEM_TIME_VERIFICATION_FAILED">
            <summary>Error number for when system time verification failed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SYSTEM_TIME_INVALID">
            <summary>Error number for when the system time is invalid</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_SYSTEM_IDENTIFIERS_DONT_MATCH">
            <summary>Error number for when system identifiers do not match</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor">
            <summary>
            Creates a new LicenseError object with no error or exception
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32)">
            <summary>Creates a new LicenseError object with a given error (and no exception)</summary>
            <param name="e">Int32</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new LicenseError object with a given error and extended error (and no exception)</summary>
            <param name="e">Int32 - Error Code</param>
            <param name="ee">Int32 - Extended Error Code</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32,System.Exception)">
            <summary>Creates a new LicenseError object with a given error number and exception</summary>
            <param name="e">Int32 - Error Code</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32,System.Int32,System.Exception)">
            <summary>Creates a new LicenseError object with a given error number, extended error number, and exception</summary>
            <param name="e">Int32 - Error Code</param>
            <param name="ee">Int32 - Extended Error Code</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.initialize(System.Int32,System.Exception)">
            <summary>Helper method called by all constructors to handle initialization</summary>
            <param name="e">Int32</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.initialize(System.Int32,System.Int32,System.Exception)">
            <summary>Helper method called by all constructors to handle initialization</summary>
            <param name="e">Int32</param>
            <param name="ee">Int32</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.ToString">
            <summary>The human-readable description of the error (exactly the same as the value given by the ErrorString property)</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.GetWebServiceErrorMessage(com.softwarekey.Client.Licensing.LicenseError)">
            <summary>Returns a plain-English web service error description.</summary>
            <param name="lastError">LicenseError - the LicenseError object which contains the error received</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.GetWebServiceErrorMessage(System.Int32)">
            <summary>Returns a plain-English web service error description.</summary>
            <param name="extendedErrorCode">Int32 - The Web Service Error/Result Code</param>
            <returns>string</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ErrorNumber">
            <summary>The error number/code</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ExtendedErrorNumber">
            <summary>The extended error number/code.  This may be returned by an external source, such as a SOLO Server web service.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ErrorString">
            <summary>The human-readable description of the error</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ErrorException">
            <summary>The exception associated with the error (may be null)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier">
            <summary>Hard Disk Volume Serial Numer Identifier</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.m_HardDiskVolumeSerialIdentifierId">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor">
            <summary>Default HardDiskVolumeSerialIdentifier Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor(System.String)">
            <summary>
            HardDiskVolumeSerialIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor(System.String,System.String)">
            <summary>HardDiskVolumeSerialIdentifier constructor allowing for initialization with the name and value</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>HardDiskVolumeSerialIdentifier constructor allowing for initialization with the name, value, and hash</summary>
            <param name="name">string</param>
            <param name="value">string</param>
            <param name="hash">string</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.Type">
            <summary>Returns the type of system identifier this is</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm">
            <summary>Hard Disk Volume Serial Numer Identifier Algorithm</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.#ctor">
            <summary>Default ComputerNameIdentifierAlgorithm constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifiers">
            <summary>
            Returns a generic list of Computer Name system identifers
            </summary>
            <returns>List</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetDriveSerialNumber(System.String)">
            <summary>Returns the drive serial number for a given drive letter</summary>
            <param name="driveLetter"></param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetVolumeInformation(System.String,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.Text.StringBuilder,System.UInt32)">
            <summary>PInvoke call to the GetVolumeInformation WinAPI call.</summary>
            <param name="PathName">The path to the drive</param>
            <param name="VolumeNameBuffer">StringBuilder - Buffer for the volume name</param>
            <param name="VolumeNameSize">UInt32 - Size of the volume name buffer</param>
            <param name="VolumeSerialNumber">ref UInt32 - the volume serial number</param>
            <param name="MaximumComponentLength">ref UInt32 - the maximum component size</param>
            <param name="FileSystemFlags">ref UInt32 - volume flags</param>
            <param name="FileSystemNameBuffer">StringBuilder - the file system name buffer</param>
            <param name="FileSystemNameSize">UInt32 - the size of the file system name buffer</param>
            <returns>long</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm">
            <summary>Network Name System Identifier Algorithm</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm.#ctor(System.String)">
            <summary>Default NetworkNameIdentifierAlgorithm constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm.GetIdentifiers">
            <summary>
            Returns a generic list of Network Name system identifers
            </summary>
            <returns>List</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NicIdentifier">
            <summary>Network Interface Card (NIC) System Identifier Algorithm</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NicIdentifier.m_nicIdentifierId">
            <summary>Static member for tracking default ID's generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor">
            <summary>Default NicIdentifier Constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.String)">
            <summary>
            NicIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            NicIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">PhysicalAddress</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            NicIdentifier constructor allowing for initialization with the value
            </summary>
            <param name="value">NetworkInterface</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.String,System.String)">
            <summary>
            NicIdentifier constructor allowing for initialization with the name and value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>
            NicIdentifier constructor allowing for initialization with the name, value, and hash
            </summary>
            <param name="name">string</param>
            <param name="value">string</param>
            <param name="hash">string</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.NicIdentifier.Type">
            <summary>Returns the type of system identifier this is</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm">
            <summary>Network Interface Card (NIC) System Identifier Algorithm</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.thisAlgorithmId">
            <summary>This algorithm's name</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.#ctor">
            <summary>Default NicIdentifierAlgorithm constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.GetIdentifiers">
            <summary>
            Returns a generic list of NIC system identifers
            </summary>
            <returns>List</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.ShouldBeIgnored(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Determines whether or not a network interface should be ignored
            </summary>
            <param name="iface">NetworkInterface</param>
            <returns>bool</returns>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RsaHelper">
            <summary>Helper class for RSA cryptographic routines</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.RSA_PKCS1v15_PADDINGSIZE">
            <summary>The number of bytes needed for PKCS1v15 padding</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.RSA_PKCS1OAEP_PADDINGSIZE">
            <summary>The number of bytes needed for OAEP padding</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.RSA_DEFAULT_KEYLENGTH">
            <summary>The default key length (in bits)</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.m_rsa">
            <summary>The cryptography provider</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.m_useOaepPadding">
            <summary>Whether or not OAEP padding should be used (strongly recommended to be left as true)</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.m_keyStore">
            <summary>The key store to use</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.#ctor(com.softwarekey.Client.Encryption.RsaHelper.KeyStore)">
            <summary>
            Constructor for overriding the key store used.
            </summary>
            <param name="keyStore">KeyStore</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GetNewProvider(System.Int32,com.softwarekey.Client.Encryption.RsaHelper.KeyStore)">
            <summary>
            Returns a new cryptographic provider for a given key size (in bits)
            </summary>
            <param name="keyLength">int</param>
            <param name="keyStore">KeyStore</param>
            <returns>RSACryptoServiceProvider</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Clear">
            <summary>Clears cryptographic information and removes the key from the key store.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GetXmlKeyString(System.Boolean)">
            <summary>
            Returns the private key in an XML formatted string used by the .NET RSA cryptography provider
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.SetKeysFromXml(System.String)">
            <summary>
            Sets the private key from an XML formatted string used by the .NET RSA cryptography provider
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GetCspBlob(System.Boolean)">
            <summary>
            Gets base 64 encoded key data in the form of a CSP binary blob
            </summary>
            <param name="includePrivateData">bool</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.SetKeysFromCspBlob(System.String)">
            <summary>
            Sets the key data based on a base 64 encoded CSP binary blob
            </summary>
            <param name="blob">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GenerateKey(System.Int32)">
            <summary>
            Returns an XML string of a new RSA key
            </summary>
            <param name="keyLength">int</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GenerateKey(System.Int32,System.Boolean,com.softwarekey.Client.Encryption.RsaHelper.KeyStore)">
            <summary>
            Returns an XML string of a new RSA key
            </summary>
            <param name="keyLength">int</param>
            <param name="includePrivateData">bool</param>
            <param name="keyStore">KeyStore</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Encrypt(System.String)">
            <summary>
            Encrypts a string value and returns the encrypted value as a base64 encoded string
            </summary>
            <param name="value">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Decrypt(System.String)">
            <summary>
            Decrypts an encrypted and base64 encoded string and returns the original plain-text string value
            </summary>
            <param name="value">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Sign(System.String)">
            <summary>
            Generates an RSA signature as a base64 encoded string
            </summary>
            <param name="value">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Verify(System.String,System.String)">
            <summary>
            Returns true if the data can be verified
            </summary>
            <param name="value">string</param>
            <param name="signature">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.ProcessBytes(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[],com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction)">
            <summary>
            Processes RSA Encryption and Decryption on a byte array
            </summary>
            <param name="rsa">RsaCryptoServiceProvider</param>
            <param name="bytes">byte[]</param>
            <param name="action">ByteProcessingAction</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.CanonicalizeXmlDsigCN14(System.Xml.XmlDocument)">
            <summary>
            Returns canonicalized XML per the W3C recommendation (see http://www.w3.org/TR/2001/REC-xml-c14n-20010315)
            </summary>
            <param name="xmlDoc">XmlDocument</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.SignXmlDocument(System.Xml.XmlDocument@)">
            <summary>
            Signs an XML Document
            </summary>
            <param name="xmlDoc">XmlDocument</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.EncryptXmlElementByTagName(System.Xml.XmlDocument@,System.String)">
            <summary>
            Encrypts an XML tag by name (only encrypts and replaces 1 tag at a time)
            </summary>
            <param name="xmlDoc">XmlDocument</param>
            <param name="elementTagName">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.DecryptXmlDocument(System.Xml.XmlDocument@)">
            <summary>
            Decrypts an XML Document
            </summary>
            <param name="xmlDoc">XmlDocument</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.DecryptXmlDocument(System.Xml.XmlDocument@,System.Boolean)">
            <summary>
            Decrypts an XML Document recursively if recursive is true, or decrypts the root node's child elements only if recursive is false
            </summary>
            <param name="xmlDoc"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.VerifyXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Returns true if the signature of a given XML Document is verified.
            </summary>
            <param name="xmlDoc">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.RsaHelper.UseOaepPadding">
            <summary>True of OAEP padding is to be used, false if direct encryption (PKCS1v15 padding) is to be used.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction">
            <summary>Enumeration for determining how to process bytes during cryptographic routines</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction.EncryptData">
            <summary>Encrypt Data</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction.DecryptData">
            <summary>Decrypt Data</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RsaHelper.KeyStore">
            <summary>Enumeration for the different key store types</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.KeyStore.Machine">
            <summary>Machine Key Store</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.KeyStore.User">
            <summary>User Key Store</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemIdentifierValidation">
            <summary>SystemIdentifierValidation - class for validating the the current system's identification</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifierValidation.REQUIRE_EXACT_MATCH">
            <summary>Constant for the value to use to indicate that an exact match is required</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.#ctor">
            <summary>Default SystemIdentifierValidation constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.#ctor(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier},System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier},System.Int32)">
            <summary>SystemIdentifierValidation constructor for initializing the validation object with all required validation data</summary>
            <param name="authorizedIdentifiers">A generic list of authorized SystemIdentifier objects</param>
            <param name="currentIdentifiers">>A generic list of the current system's SystemIdentifier objects</param>
            <param name="requiredMatches">int - The number of required matching system identifiers.  Use SystemIdentifierValidation.REQUIRE_EXACT_MATCH to require an exact match (which is the default).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.Validate">
            <summary>Compares the current system identifiers against the authorized system identifiers, and returns true if it successfully validates and confirms the current system's identity.</summary>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifierValidation.RequiredMatches">
            <summary>The number of required matching system identifiers.  Use SystemIdentifierValidation.REQUIRE_EXACT_MATCH to require an exact match (which is the default).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifierValidation.AuthorizedIdentifiers">
            <summary>A generic list of authorized SystemIdentifier objects</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifierValidation.CurrentIdentifiers">
            <summary>A generic list of the current system's SystemIdentifier objects</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.AuthorEncryptionKey">
            <summary>AuthorEncryptionKey - Class for internal encryption key data use</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.#ctor(System.String,System.String,System.String)">
            <summary>AuthorEncryptionKey constructor</summary>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>AuthorEncryptionKey constructor - Allows overriding use of the Machine Key Store.</summary>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
            <param name="useMachineKeyStore">bool - Default is true; set to false to use the User Key Store instead.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.#ctor(System.String,com.softwarekey.Client.Encryption.RsaHelper,com.softwarekey.Client.Encryption.RsaHelper)">
            <summary>AuthorEncryptionKey - constructor for initializing with already intialized key data</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.Initialize(System.String,System.String,System.String,System.Boolean)">
            <summary>Initializes the object</summary>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
            <param name="useMachineKeyStore">bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.Clear">
            <summary>Clears out previous data - THIS WILL MAKE THIS OBJECT INSTANCE UNUSABLE!</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.ClientKey">
            <summary>The Client Key</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.ServerKey">
            <summary>The Server Key</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.EncryptionKeyID">
            <summary>Encryption Key ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.LastError">
            <summary>The last error (represented by a LicenseError object) which occurred in this object.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.FileLock">
            <summary>Utility class for locking files to the current process</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.#ctor(System.String)">
            <summary>Default FileLock Constructor</summary>
            <param name="filePath">string - The absolute path to the file which will be locked to this process.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.#ctor(System.String,com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode)">
            <summary>Default FileLock Constructor</summary>
            <param name="filePath">string - The absolute path to the file which will be locked to this process.</param>
            <param name="deleteMode">FileLockDeleteMode - How and if file deletion is necessary after unlocking the file (FileLockDeleteMode.Never is the default).</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.#ctor(System.String,System.Boolean,com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode)">
            <summary>Default FileLock Constructor</summary>
            <param name="filePath">string - The absolute path to the file which will be locked to this process.</param>
            <param name="createMissing">bool - Whether or not to create the file if it is missing. Creation occurs when attempting to lock the file with the Lock method.</param>
            <param name="deleteMode">FileLockDeleteMode - How and if file deletion is necessary after unlocking the file (FileLockDeleteMode.Never is the default).</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.Lock">
            <summary>Locks the target file to the process, and returns true if successful.</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.Unlock">
            <summary>Unlock the target file, and return true if successful</summary>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.FileLock.FilePath">
            <summary>The absolute path to the file which will be locked to this process.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.FileLock.IsLocked">
            <summary>True only if the target file is locked</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.FileLock.LastException">
            <summary>The last exception that occurred, if any</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode">
            <summary>Enumeration for specifying how and if file deletion is necessary after unlocking the file.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode.Never">
            <summary>Never delete the file after unlocking it</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode.WhenPossible">
            <summary>Only delete the file after unlocking it when possible</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode.AlwaysRequired">
            <summary>Always require deletion of the file when unlocking it</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.IOHelper">
            <summary>
            Utility class for working with files and directories.
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.ToUncPath(System.String)">
            <summary>
            Converts a path containing a mapped drive to a UNC path
            </summary>
            <param name="path">string</param>
            <returns>string</returns>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SimpleNetworkTime">
            <summary>Class for performing SNTP queries</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_host">
            <summary>The NTP server's host address</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_port">
            <summary>The NTP server's port</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_sendTimeout">
            <summary>The timeout (in milliseconds) for sending the request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_receiveTimeout">
            <summary>The timeout (in milliseconds) for receiving the response</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SimpleNetworkTime.GetNetworkTime">
            <summary>Gets the current time from an NTP server</summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SimpleNetworkTime.DoNtpRequest">
            <summary>Processes an SNTP request</summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SimpleNetworkTime.GetMilliseconds(System.Byte[],com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset)">
            <summary>Gets the time, in milliseconds, returned from the SNTP request</summary>
            <param name="data">byte[]</param>
            <param name="eoffset">TimestampOffset</param>
            <returns>ulong</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.Host">
            <summary>The NTP Host Address</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.Port">
            <summary>The NTP Host Port</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.SendTimeout">
            <summary>The time (in milliseconds) until a synchronous attempt to send data times out.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.ReceiveTimeout">
            <summary>The time (in milliseconds) until a synchronous attempt to receive data times out.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset">
            <summary>Timestamp offsets</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.ReferenceId">
            <summary>Reference ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.ReferenceTime">
            <summary>Reference Time</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.OriginateTime">
            <summary>Originate Time</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.ReceiveTime">
            <summary>Receive Time</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.TransmitTime">
            <summary>Transmit Time</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation">
            <summary>SystemDateTimeValidation - class for validating the date/time of the current system against Internet time servers</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.#ctor">
            <summary>Default SystemDateTimeValidation constructor</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.#ctor(System.Boolean)">
            <summary>SystemDateTimeValidation constructor that allows you to specify whether or not validation is required (set to true by default)</summary>
            <param name="validationRequired">bool - True by default.  If false, failure to reach an Internet time server is acceptable.  Set to true if validation (and consequently, Internet access) is absolutely required.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.#ctor(System.Boolean,System.Double)">
            <summary>SystemDateTimeValidation constructor that allows you to specify whether or not validation is required (set to true by default)</summary>
            <param name="validationRequired">bool - True by default.  If false, failure to reach an Internet time server is acceptable.  Set to true if validation (and consequently, Internet access) is absolutely required.</param>
            <param name="allowedVariation">double - The amount of time (in minutes) found acceptable for variation between the curren systems date/time versus the Internet time server's date/time</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <param name="host">string - the host name or IP address of the Internet time server</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <param name="host">string - the host name or IP address of the Internet time server</param>
            <param name="port">int - the port in which the time server's service is reachable (default is 123)</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <param name="host">string - the host name or IP address of the Internet time server</param>
            <param name="port">int - the port in which the time server's service is reachable (default is 123)</param>
            <param name="sendTimeout">int - the amount of time(in milliseconds) before the attempt to send the request times out (default is 1000)</param>
            <param name="receiveTimeout">int - the amount of time(in milliseconds) before the attempt to receive the request times out (default is 2000)</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.Validate">
            <summary>Validates the current system's Date/Time against that of Internet time servers, and returns true if it finds the conditions to be acceptable</summary>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemDateTimeValidation.ValidationRequired">
            <summary>True by default.  If false, failure to reach an Internet time server is acceptable.  Set to true if validation (and consequently, Internet access) is absolutely required.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AllowedVariation">
            <summary>The amount of time (in minutes) found acceptable for variation between the curren systems date/time versus the Internet time server's date/time. (5.0 by default)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.ManualRequestFile">
            <summary>ManualRequestFile - Utility class for creating HTML files to simplify processing a manual request</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.#ctor(System.String,System.String)">
            <summary></summary>
            <param name="requestData"></param>
            <param name="requestFilePath"></param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.Save">
            <summary>Saves the request file to the specified path</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.GetEncodedData(System.String)">
            <summary>Encodes XML data so it can be included in an HTML form</summary>
            <param name="requestData">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.GetDefaultMarkupTop">
            <summary>Default Top Markup</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.GetDefaultMarkupBottom">
            <summary>Default Bottom Markup</summary>
            <returns></returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.RequestData">
            <summary>The Request Data - this should already be encrypted and signed</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.RequestFilePath">
            <summary>The path where the request file should be saved</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.MarkupTop">
            <summary>The markup prior to the form - set or override this to implement a custom design, if desired.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.MarkupBottom">
            <summary>The markup after the form - set or override this to implement a custom design, if desired</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.RequestFormUrl">
            <summary>The URL to the request form which will be posted to in order to obtain the response document -  set or override this if you are using the Instant SOLO Server Dedicated URL option or purchased SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.FormMarkup">
            <summary>The markup for the form which is to be posted.  Make sure all other relevent properties are set before referencing this property</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.#ctor">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallation(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFile(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFileAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFileAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatus(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatusAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatusAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallation(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallationAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallationAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationCompleted">
            <remarks/>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFileCompleted">
            <remarks/>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatusCompleted">
            <remarks/>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallationCompleted">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.#ctor">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFile(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFileAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFileAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFileCompleted">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.WritableLicense">
            <summary>
            This is an alternative to the License class, which allows you to work
            with License Files that may be written to.
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.#ctor(System.String,System.String)">
            <summary>
            Initializes a WritableLicense Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a WritableLicense Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Initializes a WritableLicense Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
            <param name="productId">Int32</param>
            <param name="encryptionKey">string</param>
            <param name="productVersion">string</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>
            Initializes a WritableLicense Object with the cryptographic keys (CSP blobs)
            </summary>
            <param name="serverKey">string</param>
            <param name="clientKey">string</param>
            <param name="useEncryptedFile">bool</param>
            <param name="useWebServiceEncryption">bool</param>
            <param name="productId">Int32</param>
            <param name="encryptionKey">string</param>
            <param name="productVersion">string</param>
            <param name="identifierAlgorithms">List</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.initializeFromXml(System.Xml.XmlDocument)">
            <summary>
            Initializes a WritableLicense from an XmlDocument
            </summary>
            <param name="xml">XmlDocument</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.Load(System.String)">
            <summary>Loads a license file from a given location.  The contents provided in the data argument varies on the value of the locationType argument.</summary>
            <param name="data">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ProcessActivateInstallationLicenseFileResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes an activation XML response and populates the license properties with the new license data from the server</summary>
            <param name="response">XmlNode</param>
            <param name="licenseContent">string - The new License File contents</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ProcessLicenseRefreshResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes a License Refresh response and populates the license properties with the new license data from the server</summary>
            <param name="response">XmlNode</param>
            <param name="licenseContent">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ProcessDeactivateInstallationResponse(System.Xml.XmlNode)">
            <summary>Processes the installation deactivation response.  Returns true if the deactivation was successful; otherwise, returns false.</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.GetWritableLicenseFile(System.String@)">
            <summary>Gets a writable License File and returns true if successful</summary>
            <param name="lfContent">ref string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.AddAlias(com.softwarekey.Client.Licensing.LicenseAlias)">
            <summary>Adds an alias</summary>
            <param name="alias">LicenseAlias</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteAliases(System.Int32@,System.Int32@)">
            <summary>
            Tries to write to all alias locations, and returns true if all attempts to write succeed.
            </summary>
            <param name="filesToWrite">ref int - the number of alias files to try to  write</param>
            <param name="filesWritten">ref int - the number of aliase files written</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.CheckAliases(System.Int32@,System.Int32@)">
            <summary>
            Checks all License File aliases and returns true if all checks pass
            </summary>
            <param name="numToValidate">ref int - the number of aliases to validate</param>
            <param name="numValid">ref int - the number of valid aliases (which passed the checks)</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.DeleteAliases">
            <summary>Attempts to delete all aliases</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteLicenseFile(System.String)">
            <summary>Writes a License File to the file system and returns true if successful</summary>
            <param name="path">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteAliasToLicenseFile(com.softwarekey.Client.Licensing.LicenseAlias,System.String)">
            <summary>
            Overwrites a License File with an alias
            </summary>
            <param name="alias"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ToXml">
            <summary>
            Returns an unencrypted license XML document
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LastUpdated">
            <summary>The last time the license was updated (in UTC time)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.Aliases">
            <summary>The list of aliases</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseID">
            <summary>The License ID of the license purchased and activated</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.QuantityOrdered">
            <summary>The latest version of the product available</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ProductID">
            <summary>The Product ID to which this license belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ProdOptionID">
            <summary>The Product Option ID to which this license belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.InstallationID">
            <summary>The Installation ID for the activation on this computer</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.SignatureDate">
            <summary>The date in which the license file itself was created and signed</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.EffectiveStartDate">
            <summary>The date in which the license is effective</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.EffectiveEndDate">
            <summary>The date in which the license expires.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString1">
            <summary>User Defined String Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString2">
            <summary>User Defined String Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString3">
            <summary>User Defined String Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString4">
            <summary>User Defined String Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString5">
            <summary>User Defined String Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString6">
            <summary>User Defined String Field 6</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString7">
            <summary>User Defined String Field 7</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString8">
            <summary>User Defined String Field 8</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString9">
            <summary>User Defined String Field 9</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString10">
            <summary>User Defined String Field 10</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate1">
            <summary>User Defined Date-Time Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate2">
            <summary>User Defined Date-Time Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate3">
            <summary>User Defined Date-Time Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate4">
            <summary>User Defined Date-Time Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate5">
            <summary>User Defined Date-Time Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber1">
            <summary>User Defined Number Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber2">
            <summary>User Defined Number Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber3">
            <summary>User Defined Number Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber4">
            <summary>User Defined Number Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber5">
            <summary>User Defined Number Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat1">
            <summary>User Defined Float Field 1</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat2">
            <summary>User Defined Float Field 2</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat3">
            <summary>User Defined Float Field 3</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat4">
            <summary>User Defined Float Field 4</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat5">
            <summary>User Defined Float Field 5</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LatestVersion">
            <summary>The latest version of the product available</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.TriggerCode">
            <summary>The Trigger Code number issued by SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.TriggerCodeFixedValue">
            <summary>The Trigger Code Fixed Value issued by SOLO Server</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.CustomerID">
            <summary>The Customer ID to which this license belongs</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.FirstName">
            <summary>The customer's first name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LastName">
            <summary>The customer's last name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.CompanyName">
            <summary>The customer's company name</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.Email">
            <summary>The customer's email address</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.XmlHelper">
            <summary>Helper class for common XML and XML encryption routines</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetIso8601DateTimeNodeValue(System.Xml.XmlNode,System.String,System.DateTime@)">
            <summary>Gets an XML node's ISO-8601 value and stores it to an DateTime variable (converted to local time automatically)</summary>
            <param name="xml">XmlNode</param>
            <param name="xpath">string</param>
            <param name="value">ref DateTime</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.Int32@)">
            <summary>
            Gets an XML node's value and stores it to an Int32 variable
            </summary>
            <param name="xml">XmlNode</param>
            <param name="xpath">string</param>
            <param name="value">ref Int32</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.Boolean@)">
            <summary>
            Gets an XML node's value and stores it to an bool variable
            </summary>
            <param name="xml">XmlNode</param>
            <param name="xpath">string</param>
            <param name="value">ref bool</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.Decimal@)">
            <summary>
            Gets an XML node's value and stores it to an decimal variable
            </summary>
            <param name="xml">XmlNode</param>
            <param name="xpath">string</param>
            <param name="value">ref decimal</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.DateTime@)">
            <summary>
            Gets an XML node's value and stores it to an DateTime variable
            </summary>
            <param name="xml">XmlNode</param>
            <param name="xpath">string</param>
            <param name="value">ref DateTime</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.String@)">
            <summary>
            Gets an XML node's value and stores it to an Int32 variable
            </summary>
            <param name="xml">XmlNode</param>
            <param name="xpath">string</param>
            <param name="value">ref string</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.CreateDocument(System.String)">
            <summary>Creates a new, empty XML document</summary>
            <param name="documentElementName">string - the tag name of the document/root element</param>
            <returns>XmlDocument</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.String)">
            <summary>Adds a new XML element to an XML document</summary>
            <param name="xml">XmlDocument</param>
            <param name="tagName">string</param>
            <param name="value">string</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.Int32)">
            <summary>Adds a new XML element to an XML document</summary>
            <param name="xml">XmlDocument</param>
            <param name="tagName">string</param>
            <param name="value">int</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.Double)">
            <summary>Adds a new XML element to an XML document</summary>
            <param name="xml">XmlDocument</param>
            <param name="tagName">string</param>
            <param name="value">double</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.Decimal)">
            <summary>Adds a new XML element to an XML document</summary>
            <param name="xml">XmlDocument</param>
            <param name="tagName">string</param>
            <param name="value">decimal</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.DateTime)">
            <summary>Adds a new XML element to an XML document</summary>
            <param name="xml">XmlDocument</param>
            <param name="tagName">string</param>
            <param name="value">DateTime</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.String)">
            <summary>Adds a new XML element to an XML document's reference'd node</summary>
            <param name="xml">XmlDocument (byref)</param>
            <param name="element">XmlElement (byref) - the element within the document to add the new element to</param>
            <param name="tagName">string</param>
            <param name="value">string</param>
            <returns>XmlElement - the newly created element</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.Int32)">
            <summary>Adds a new XML element to an XML document's reference'd node</summary>
            <param name="xml">XmlDocument (byref)</param>
            <param name="element">XmlElement (byref) - the element within the document to add the new element to</param>
            <param name="tagName">string</param>
            <param name="value">int</param>
            <returns>XmlElement - the newly created element</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.Decimal)">
            <summary>Adds a new XML element to an XML document's reference'd node</summary>
            <param name="xml">XmlDocument (byref)</param>
            <param name="element">XmlElement (byref) - the element within the document to add the new element to</param>
            <param name="tagName">string</param>
            <param name="value">decimal</param>
            <returns>XmlElement - the newly created element</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.Double)">
            <summary>Adds a new XML element to an XML document's reference'd node</summary>
            <param name="xml">XmlDocument (byref)</param>
            <param name="element">XmlElement (byref) - the element within the document to add the new element to</param>
            <param name="tagName">string</param>
            <param name="value">double</param>
            <returns>XmlElement - the newly created element</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.DateTime)">
            <summary>Adds a new XML element to an XML document's reference'd node</summary>
            <param name="xml">XmlDocument (byref)</param>
            <param name="element">XmlElement (byref) - the element within the document to add the new element to</param>
            <param name="tagName">string</param>
            <param name="value">DateTime</param>
            <returns>XmlElement - the newly created element</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.ImportDocument(System.Xml.XmlDocument@,System.Xml.XmlDocument)">
            <summary>
            Imports an xml document as a child element of the document element
            </summary>
            <param name="doc">XmlDocument - the document to import to</param>
            <param name="docToImport">XmlDocument - the document to import</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.ImportDocument(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.Xml.XmlDocument)">
            <summary>
            Imports an xml document as a child element of the specified element
            </summary>
            <param name="doc">XmlDocument - the document to import to</param>
            <param name="element">XmlElement - the element to append to</param>
            <param name="docToImport">XmlDocument - the document to import</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.EncryptWebServiceRequest(com.softwarekey.Client.Encryption.RsaHelper,com.softwarekey.Client.Encryption.RsaHelper,System.String,System.Boolean,System.String@)">
            <summary>
            Encrypts a plain-text web service request
            </summary>
            <param name="clientKey">RsaHelper</param>
            <param name="serverKey">RsaHelper</param>
            <param name="request">string</param>
            <param name="useEncryption">bool</param>
            <param name="encrypted">ref string</param>
            <returns></returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.DecryptWebServiceResponse(com.softwarekey.Client.Encryption.RsaHelper,com.softwarekey.Client.Encryption.RsaHelper,System.Xml.XmlNode,System.Boolean,System.Boolean,System.Xml.XmlDocument@)">
            <summary>
            Decrypts a web service response
            </summary>
            <param name="clientKey">RsaHelper</param>
            <param name="serverKey">RsaHelper</param>
            <param name="response">XmlNode</param>
            <param name="recursive">bool</param>
            <param name="useEncryption">bool</param>
            <param name="xml">ref XmlDocument</param>
            <returns></returns>
        </member>
        <member name="T:com.softwarekey.Client.WebService.IWebServiceCall">
            <summary>IWebServiceCall interface</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.IWebServiceCall.GeneratePlainTextRequest">
            <summary>Generates a plain-text web service request XML string</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.IWebServiceCall.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response XmlNode</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebServiceCall">
            <summary>WebServiceCall class</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.#ctor(System.String,System.String,System.Web.Services.Protocols.SoapHttpClientProtocol,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>WebServiceCall Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="className">string - the name of the web service client class</param>
            <param name="methodName">string - the name of the web service method to be called</param>
            <param name="client">SoapHttpClientProtocol</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.#ctor(System.String,System.String,System.Web.Services.Protocols.SoapHttpClientProtocol,System.String,System.String,System.String)">
            <summary>WebServiceCall Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="className">string - the name of the web service client class</param>
            <param name="methodName">string - the name of the web service method to be called</param>
            <param name="client">SoapHttpClientProtocol</param>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.GeneratePlainTextRequest">
            <summary>Generates a plain-text web service call request string</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.GenerateEncryptedRequest">
            <summary>Generates an encrypted web service call request string</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ResetSessionCode">
            <summary>Sets the SessionCode value to a new, randomized value</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ProcessResponse(System.String@)">
            <summary>Processes a response XML string</summary>
            <param name="response">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response XmlNode</summary>
            <param name="response">ref XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService">
            <summary>Calls the web service method</summary>
            <returns>bool</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.AppendSessionCode(System.String)">
            <summary>Appends the SessionCode value to an XML string depending on the SessionCodeValidation setting, and returns the updated XML string</summary>
            <param name="xml">string</param>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.AppendSessionCode(System.Xml.XmlDocument)">
            <summary>Appends the SessionCode value to an XmlDocument depending on the SessionCodeValidation setting, and returns the updated XML string</summary>
            <param name="xml">XmlDocument</param>
            <returns>string</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.EncryptionKey">
            <summary>Author encryption key data</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.ClassName">
            <summary>Class Name of the client object</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.MethodName">
            <summary>Method name to call in the client object</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.ResultCode">
            <summary>Web Service Result Code</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.ErrorMessage">
            <summary>Web Service Error Message</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.LastError">
            <summary>The last error which occurred</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.WebServiceClient">
            <summary>The Web Service client object used to perform the web service call</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption">
            <summary>Whether or not encryption is to be used or is required for the web service call</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.WebServiceResponse">
            <summary>The web service response XmlNode</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.SessionCode">
            <summary>Randomized session code used to deter replay attacks</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.SessionCodeValidation">
            <summary>Whether or not session code validation should be done automatically</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation">
            <summary>Session Validation Levels</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation.None">
            <summary>Do not use session validation</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation.WhenAvailable">
            <summary>Only use session validation when available</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation.Required">
            <summary>Always require the use of session validation and require it (recommended)</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation">
            <summary>ActivateInstallation web service call class</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>ActivateInstallation Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>ActivateInstallation Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.#ctor(System.String,System.String,System.String)">
            <summary>ActivateInstallation Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String,System.String,System.String)">
            <summary>ActivateInstallation Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for ActivateInstallation calls</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response XmlNode</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.LicenseID">
            <summary>License ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.Password">
            <summary>Customer Password</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.SerialNumber">
            <summary>Serial Number</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductID">
            <summary>Product ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProdOptionID">
            <summary>Product Option ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.UserCode1">
            <summary>User Code 1 (Usually the Protection PLUS Session Code, if applicable)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.UserCode2">
            <summary>User Code 2 (Usually the Protection PLUS Computer ID, if applicable)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.RegistrationKey1">
            <summary>Activation Code 1 (Also known as Protection PLUS's RegKey1)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.RegistrationKey2">
            <summary>Activation Code 2 (also known as Protection PLUS's RegKey2)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.RequireRegistration">
            <summary>Whether or not customer registration is required for activation</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.InstallationName">
            <summary>Installation Name</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.InstallationID">
            <summary>Installation ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductVersion">
            <summary>Product Version (Optional - must be formatted like x.x.x.x)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductVersionNumber">
            <summary>Product Version (Optional - this is the same as the ProductVersion property, but uses the System.Version class to create the ProductVersion string)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ActivationData">
            <summary>Activation Data (Optional - XmlDocument containing System Identifier information)</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile">
            <summary>ActivateInstallationLicenseFile web service call class</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>ActivateInstallationLicenseFile Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>ActivateInstallationLicenseFile Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.#ctor(System.String,System.String,System.String)">
            <summary>ActivateInstallationLicenseFile Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String,System.String,System.String)">
            <summary>ActivateInstallationLicenseFile Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for ActivateInstallationLicenseFile calls</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response XmlNode</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseID">
            <summary>License ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.Password">
            <summary>Customer Password</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.SerialNumber">
            <summary>Serial Number</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductID">
            <summary>Product ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProdOptionID">
            <summary>Product Option ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.UserCode1">
            <summary>User Code 1 (Usually the Protection PLUS Session Code, if applicable)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.UserCode2">
            <summary>User Code 2 (Usually the Protection PLUS Computer ID, if applicable)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.RegistrationKey1">
            <summary>Activation Code 1 (Also known as Protection PLUS's RegKey1)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.RegistrationKey2">
            <summary>Activation Code 2 (also known as Protection PLUS's RegKey2)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.RequireRegistration">
            <summary>Whether or not customer registration is required for activation</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.InstallationName">
            <summary>Installation Name</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.InstallationID">
            <summary>Installation ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductVersion">
            <summary>Product Version (Optional - must be formatted like x.x.x.x)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductVersionNumber">
            <summary>Product Version (Optional - this is the same as the ProductVersion property, but uses the System.Version class to create the ProductVersion string)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ActivationData">
            <summary>Activation Data (Optional - XmlDocument containing System Identifier information)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseFileContents">
            <summary>The License File contents</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus">
            <summary>CheckInstallationStatus web service call class</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>CheckInstallationStatus Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>CheckInstallationStatus Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.#ctor(System.String,System.String,System.String)">
            <summary>CheckInstallationStatus Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String,System.String,System.String)">
            <summary>CheckInstallationStatus Constructor - Accepts encryption key data from SOLO Server required to create a new AuthorEncryptionKey object</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKeyId">string</param>
            <param name="clientKey">string</param>
            <param name="serverKey">string</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for CheckInstallationStatus calls</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response XmlNode</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.InstallationID">
            <summary>Installation ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProductVersion">
            <summary>Product Version (Optional - must be formatted like x.x.x.x)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProductVersionNumber">
            <summary>Product Version (Optional - this is the same as the ProductVersion property, but uses the System.Version class to create the ProductVersion string)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ActivationData">
            <summary>Activation Data (Optional - XmlDocument containing System Identifier information)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.Log">
            <summary>Log (Optional - XmlDocument containing usage log data)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ExpirationDate">
            <summary>The Installation/License's Expiration Date from SOLO Server</summary>
        </member>
    </members>
</doc>
